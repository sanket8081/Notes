Git uses Git as a source code manager

#Git Congifurations:

System:
/etc/gitconfig
ProgramFiles/Git/etc/gitconfig

User:
~/.gitconfig
$Home\.gitconfig

Project:
my_project/.git/config


Commands to edit these 3 configurations:

System level:
git config --system

User level:
git config --global

Project:
git config


Setting some user level git properties:

git config --global user.name "Sanket Deshmukh"
git config --global user.email "sanket8081@gmail.com"


#List all your git configurations
git config --list


#Priting user property
git config user.email
git config user.name

#Updating the properties
git config --global core.editor "notepad.exe"   //If you are on windows, this will open a notepad for you when git gives you a popup and asks for a message
git config --global color.ui true    // This allows git to use multiple colors (By default set to true, but a good practice to set it explicitly)



#Git Auto-Completion

Auto-completes commands, file paths,branch names
The script for this is located in https://github.com/git/git


#Git help
git help

git help pull //Gives whole description about the pull command.

#Git log
git log -n(Can be any number)    // It gives last n commit transactions for that repository.
git log --since 2022-01-01       // Commit history from the date you mentioned
git log --until 2022-02-02  	// Commit history till the date you mentioned
git log --grep="Init"			// Gives you the commits or the logs which matched the string which you passed
git log --author 				//defines the commit's author
git log --oneline				//Give first line f commit msg with the short version of SHA value

#Initializing a Repository
git init

#Where git files are stored?
.git folder includes all info related to branches, excluded files, logs and the configurations file.

#Commit

git add .   ( Here dot(.) represents all files under this current directory )
git commit -m "Intial commit"  // These command commit the changes which you have add and track them forever. Better to keep it less than 60 characters

Commit messages are label for the changes and also make a practice to use present tense while writing it.
We can also write descriptive messages by follwed a blank line and a more complete description. The descriptive message single line should be upto 72 characters.

Examples:

git commit -m "Intial commit"

This was a intial commit which 
was made at start of the project.



You can add tracking numbers from the bugs r support request "WR1234 completed"
"[css,js]"  This denotes that some changes were made in the css and js files.



#Two Tree Architecture

Refer Spring book


#Hash Values
Git generates a checksum for each of the change sets. 
That's the hash value. A checksum is a number that's generated by taking data and feeding it into a mathematical algorithm. 
The same data put into the same mathematical algorithm always returns the same result or the same checksum.
Each hash value is not only unique, it's directly tied to the contents that are inside of it.
Algo used is SHA-1 has alogorithm. (40 char hexadecimal string)
So Git takes the entire change set to all the files and directories that are being changed, 
things that have been staged, and it runs them through this SHA-1 algorithm and it comes up with this 40-long character string. 
And that's what it uses to label the commit
For creating the SHA value it not only uses the chnage set but alos uses the meta data (Parent , author, message)
v2 SHA value includes a SHA value from v1 so that they are linked.
It also mantains the history of the changes and how they relate to each other is builtin


#HEAD pointer

Points to the tip of the current branch in the repository, last state of the repository,what was last checked out.
Also points to parent of nect commit where writing commit takes place

master Branch
123ab  --> cdb23 --> 323dbf (HEAD)


New Branch (Now head moves to this)
123ab  --> cdb23 --> 323dbf (HEAD)



Info store in HEAD  file in .git directory


#Getting status
git status

#Add Files
git add . (Will add all the changes to Staging index from the working directory)


#If you want to undo or unstage your changes, then use below command
git reset HEAD <File Name>

#Commit
git commit -m "Intial commit"  ( Will commit the staged changes to repository )

O/P of the above cmd gives you the shot version of the SHA value. And if we check the logs we will see that the HEAD would have point to the latest commit.


#To discard changes in working directory
git checkout <file>


#View changes with difference ( This will only list the changes which are not staged)
git diff

- indicates that this line has changed
+ indicates that this line has been added

#By default, git diff comapres the changes between the working directory and the staging tree.
To view difference betwwen the repository and the statging tree use below command:

git diff --staged
or
git diff --cached

git diff --color-words   //shows exactly what we changed


#Delete files

Deleting files which are in staging tree.
Two ways to achive this:
1.Directly delete the file from your working directory after your commit.
	Then git rm <file>    (This will remove the file from the statging tree)
	Then git commit -m "First File deleted"
	
2. git rm <file>  // this will be removed by the unix remove command  and it will also be removed from the staging tree
	git commit -m "Second file deleted"
	
	

#Moving or Renaming files:
1)Right Click -> renamed the file
git add new_file
git rm old_file

After this it will stage the new changes

2)git mv old_file new_file

After this it will stage the new changes
//It will show as renamed as the file contents are identical, If the files similarity does not cross the threshold i.e around 50% then 




#Stage and Commit Shortcut
git commit -a 
git commit -am "final commit shortcut"
git commit --all

It Stages and commit all changes to tracked files
Does not include untracked files.



#View a commit
git show SHA_VALUE


#Compare commits

git diff SHA_1..SHA_2
or
git diff SHA_1..HEAD



#Make Atomic commits
Group things together which are related and relevant to each other and commit them accordingly.

Small commits
Only affect a single aspect
Easier to understand, to work with, and to find bugs
Improves collaboration



#Undo Changes

1. Undo changes in the working directory

If you editied some file in your working directory and then close it, now you cannot unod the changes. 
So here git helps us to recover those as it keeps tracking our files

git status     // this will give the status of your working directory
git checkout -- index.html
git status    // this will confirm you that the changes you made were discarded.


2. Undo the changes made to our staging tree

Unstage the changes that were staged. ( Undoing the changes made in staging index by git add .. command)

git reset HEAD <file>   // This will unstage the file/files from the staging index.


3. Amending the commit
Amending means merging changes to latest commit without making any new commit.
Git only allows us to make changes in the lastest commit as 
rest all previous commits are linked to each other and are referred as parent of some other commit.
Git mantains the data integrity without breaking the chain of old commits.
The latest commit is the only one whoes SHA value is not stored to any other commit.

git commit --amend -m "Latest commit chnaged"

Doing this it will bring back the old commit to the staging , add the changes and then recommit that.


4. Retrive old versions:

Git only allows amenfing the most recent commit.
Edits which undo changes should be new commits
This may be helpful to retrieve the an old version  of a file.

Steps to follow:

git show SHA_VALUE  // this will give you the details about the commit

git checkout PREV_SHA_VALUE -- file_name    // -- represents the current branch, This will give you the file 
												  with older version in your staging as well as your working directory 
												  before the commit.



5. Revert a commit

This will not edit the commit, it will make the new commit the the changes reverted
git revert SHA_VALUE


6. Remove untracked files

Some times file get added which we don't want to add ex: log file, compiled code, class files.
This will remove only files which are untracked, not in staging directory or repository
This can be achieved by git clean command. (-n does the dry run and -f forces the command and executes the clean operation)

git clean -n  //gives list of files which will be removed
git clean -f  // This will remove the untracked files

git reset HEAD junk1.txt    // This will move it from staging directory to working directory

git clean -n/-f

*****************************************************************************************************



Create project
Go to your peoject directory

git checkout -b newbranch (Used to create new branch)

git init (Performed only one time)
git add . (Pushes your files)
git push 
git commit -m "Intail commit"


//account setup
git config --global user.email "sanket8081@gmail.com"
git config --global user.name "sanket8081"

//send to server
git remote add origin https://github.com/sanket8081/Covid19IndiaBackend.git
git push -u origin master


//To pull any changes from the repository
git pull



Git Commands:

Creating a new repository 
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/sanket8081/GymAppBackEnd.git
git remote add origin https://github.com/sanket8081/Notes.git

git push -u origin main


Push an existing repository from command line

git remote add origin https://github.com/sanket8081/GymAppFronEnd.git
git branch -M main
git push -u origin main





