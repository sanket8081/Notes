
#Why Spring?
Spring is a very popular framework for building enterprise Java applications.
When Spring first came out, it was initially a simpler, lightweight alternative to J2EE.
They basically give you a large number of helper classes to make enterprise development easier.


#Goals of Spring
1)Lightweight development with Java POJOs, and POJOs mean Plain Old Java Objects, make it much simpler to build, as compared to the heavyweight EJBs
from the early versions of J2EE.
2)We want to promote loose coupling by making use of dependency injection.
So instead of hard wiring your objects together,you simply specify the wiring via a configuration file or annotations
3)Declarative programming
with Aspect Oriented Programming, or AOP. This'll basically allow you to add some application wide services to your given objects.
4)Minimize boilerplate Java code.
So in the early days of J2EE, there was a lot of code that you had to write, and so the folks at Spring, they created a collection of helper classes
to make it easier, and again, to minimize all of the boilerplate code,


#Inversion of Control

It's simply the design process
of outsourcing, the construction and management of your objects.
In a nutshell it basically says  that your application's going to outsource the creation and management of the objects,
and that outsourcing will be handled by a object factory,

Make use of a software engineering best practice and that's to code to an interface.
So instead of coding directly to theBaseballCoach implementation, we want to make use of a well
defined interface that all coaches will support.

@Override
Indicates that a method declaration is intended to override a method declaration in a supertype. 
If a method is annotated with this annotation type compilers are required to generate an errormessage unless at least one of the following conditions hold: 
•The method does override or implement a method declared in asupertype. 
•The method has a signature that is override-equivalent to that ofany public method declared in Object. 


# What is a Spring Bean?
A "Spring Bean" is simply a Java object.
When Java objects are created by the Spring Container, then Spring refers to them as "Spring Beans".
Spring Beans are created from normal Java classes .... just like Java objects.

# beans xmlns (Inside applicationContext.xml)
Header information here for the xml name spaces, and that's what's required for Spring to be able to process this file using
its grammar and xml schema,


#Head's up: 
In Spring 5.1, the Spring Development team changed the logging levels internally. 
As a result, by default you will no longer see the red logging messages at the INFO level. 

#Why do we specify the Coach interface in getBean()?
For example:
Coach theCoach = context.getBean("myCoach", Coach.class); 
Answer:
When we pass the interface to the method, behind the scenes Spring will cast the object for you.
context.getBean("myCoach", Coach.class)  
However, there are some slight differences than normal casting.



#Dependency Injection

Dependency Injection is a fundamental aspect of the Spring framework, through which the Spring container “injects” objects into other objects or “dependencies”.
This allows for loose coupling of components and moves the responsibility of managing components onto the container.


Considering car factory as an example.

So, you don't have to actually build the car. The car's already built for you at the factory. So, they actually inject all of the dependencies for the car.
So they inject the engine, they inject the tires, the seats and so on. So that's basically what you have here with dependency injection.
So you simply outsource the construction and injection of your object to an external entity. In this case, that's the car factory.

Spring Container Primary functions:

1.Create and manage Objects. (Inversion of Control)
2.Inject Object's dependencies. (Dependency Injection)

Ex: As seen in previous implementation , Our coach provides daily workouts.
	Now, it will provide daily fortunes. This will be new helper named as FortuneService.
	This is dependency. and now we will inject this dependency in our Coach.

Two Main Injection Types:
1. Constructor Injection
2. Setter Injection

#Constructor Injection
# Process for Constructor Injection:
	1.Define the dependency interface and class.
	2.Creates a constructor in your class for injection.
	3.Configure the dependency injection in Spring config file.
	
Here, we use <constructor-arg ref="myFortune"/> for dependency injections.
	
FAQ: What is the purpose for the no arg constructor?
	 When you don’t define any constructor in your class, compiler defines default one for you, however when you declare any constructor 
	 (in your example you have already defined a parameterized constructor), compiler doesn’t do it for you.
	 Since you have defined a constructor in class code, compiler didn’t create default one. While creating object you are invoking default one, 
	 which doesn’t exist in class code. Then the code gives an compilation error.
	 

#Setter Injection
#Process for Setter Injection:
	1.Create setter methods in your class for injections.
	2.Configure the dependency injection in Spring Config file.
	
#Injecting Literal Values
#Process for Literal Injection
	1.Create setter methods in your class for injections.
	2.Configure the dependency injection in Spring Config file.
	
#Injecting values from a Propertirs file:
#Process for Injecting values from aproperties file:
	1.Create properties file.
	2.Load properties file in Spring config file.
	3.Reference values from Properties file.
	
	
	


#How Bean scopes are defined?
Scope refers to a lifecycle of a bean, how long does the bean live?
How many instances are created?
How bean is shared?

Default scope is Singleton

Bean Example:
<bean id="myFortune" 
    	class="com.sanket8081.UdemySpringDemo.HppyFortuneServide">
</bean>

Types of Bean Scope:

Singleton  --> Allocates same memory for every reference
Prototype  --> Allocates different memory for every reference


Bean Lifecycle methods:
Refer Notebook for Diagram

Bean Lifecycle Methods/Hooks:
1. You can add custom code during bean initialization
	Calling custom business logic methods
	Setting up handles to resources(db,sockets,files)
2. You can add custom code during bean destruction
	Calling custom business logic method
	Cleanup up handles to resources(db,sockets,files)

	
Bean Init Example:
<bean id="myFortune" 
    	class="com.sanket8081.UdemySpringDemo.HppyFortuneServide"
		init-method="doMyStartUpStuff">
</bean>

Bean Destroy Example:
<bean id="myFortune" 
    	class="com.sanket8081.UdemySpringDemo.HppyFortuneServide"
		destroy-method="doMyStartUpStuff">
</bean>


#Development Process
1.Define your method init and destroy.
2. Configure thier names in Spring config file



#Note:

For "prototype" scoped beans, Spring does not call the destroy method.  Gasp!  

In contrast to the other scopes, Spring does not manage the complete lifecycle of a prototype bean: 
the container instantiates, configures, and otherwise assembles a prototype object, and hands it to the client, 
with no further record of that prototype instance.

Thus, although initialization lifecycle callback methods are called on all objects regardless of scope, 
in the case of prototypes, configured destruction lifecycle callbacks are not called. The client code must 
clean up prototype-scoped objects and release expensive resources that the prototype bean(s) are holding. 


#Java Annotations
Example: @Override  -> It tells compiler that er are overriding a method exactly listed in an interface or a parent class.
Gives compilation error we are not overriding the method correctly.

#Why Spring configuration with Annotations?
XML configuration can be verbose if we have huge number of beans, in that case you have to mention all of them in the XML configurations.
Cnfigure your Spring beans with Annotations, this minimizes the XML configuration.


#Scanning for Component Classes:
Spring will scan your Java classes for special annotations.
It will automatically register the beans in the Spring container.

#Development process for configuring Java Annotations:
1. Enable component scanning in Spring config file.

Example: 
<beans  .. >
	<context:component-scan base-package="com.sanket8081.demo"/>
</beans>
Spring will scan this packages recursively.


2. Add the @Component Annotation to your Java Class.
@Component("testCoach")
public class xyz ..

3. Retrive bean from Spring Container.
Coach theCoach = context.getBean("testCoach",Coach.class);



#Spring Dependency Injection with Annotation and autowiring

#Spring Autowoiring
For DI, Spring can use Autowiring
Spring will look for a class that mathches the property (Matches by type: class or interface)
Spring will inject it automatically, hence it is autowired.

#Autowiring example:
 Injecting FortuneService into a Coach implementation.
 Spring will scan all @Components
 Anyone implements the FortuneService interface?
 If so, let's inject them. For example: HappyFortuneService
 
#Autowiring Injection Types:
	Constructor Injection
	Setter Injection
	Field Injection
 
1) Constructor Injection

Injecting dependencies by calling contructor on your class.


#Development process - Constructor Injection
1.Define the dependency interface and class.
2.Create a constructor in your class for injections.
3.Configure the dependency injection with @Autowired annotation.


#What if we have multiple FortuneService implementation?
Spring has special support to handle this case using @Qualifier annotation.


#Commenting @Autowired still works!!
	//@Autowired
    public TennisCoach(FortuneService theFortuneService) {
        System.out.println(" theFortuneService " + theFortuneService);
        fortuneService = theFortuneService;
    }
	
As of Spring Framework 4.3, an @Autowired annotation on such a constructor is no longer necessary 
if the target bean only defines one constructor to begin with. However, if several constructors are available, 
at least one must be annotated to teach the container which one to use.
I personally prefer to use the @Autowired annotation because it makes the code more readable. 
But as mentioned, the @Autowired is not required for this scenario.


2) Setter Injection
Injecting dependencies by calling setter methods on your class.

#Autowiring example:
 Injecting FortuneService into a Coach implementation.
 Spring will scan all @Components
 Anyone implements the FortuneService interface?
 If so, let's inject them. For example: HappyFortuneService
 

#Development process - Setter Injection
1.Define the dependency interface and class.
2.Create a setter methods in your class for injections.
3.Configure the dependency injection with @Autowired annotation.

#How @Autowired works?
So basically when Spring sees this @Autowired,
it'll say hey I need to resolve a dependency,
I need to inject a dependency, and they'll look
for any class of implements FortuneService.


3) Method Injection
Injecting dependencies by calling class methods of your class.

@Autowired
public void doSomeCrazyStuff(Coach theCoachService)
{
	System.out.println("Implementing injection using class method");
	coachService = theCoachService;
}


4) Field Injection
Injecting dependencies by setting field values on your class directly. (Even private fields)
Accomplished by using Java reflection.

#Development process - Field Injection
1.Configure the dependency injection with Autowired annotation.
Applied directly to the field.
No need of setter methods.


##Which Injection type should we use?
No good or bad between these injection types, just choose your type use the same throughout your project.


#Qualifiers for DI

If we have multiple service implementations, so how does Spring know which one we need to pick?

Spring will throw an exception "NoUniqueBeanDefinationException"
No qualifying bean of type [Interface] is defined:
expected single matching bean but found 4:
A,B,C,D

To resolve this we need to tell spring which bean to use.
Use below annotation to specify which exact bean does Spring need to use.

Example:
@Autowired
@Qualifier("Bean_Id")   // name mentioned in the @Component("ABC") or the class name in lower case (happyFortuneService)
private FortuneService fortuneService;

We can apply @Qualifier for all the Injection types.



#Annotations - Default Bean Names
In general, when using Annotations, for the default bean name, Spring uses the following rule.
If the annotation's value doesn't indicate a bean name, an appropriate name will be built based on the short 
name of the class (with the first letter lower-cased).
For example:
HappyFortuneService --> happyFortuneService


#Deault Bean names: Special Case
However, for the special case of when BOTH the first and second characters of the class name are upper case, 
then the name is NOT converted.
For the case of RESTFortuneService
RESTFortuneService --> RESTFortuneService
No conversion since the first two characters are upper case.
Behind the scenes, Spring uses the Java Beans Introspector to generate the default bean name.


#Using @Qualifier  with Constructor Injection
You have to place the @Qualifier annotation inside of the constructor arguments. 
Example:

@Autowired
public TennisCoach(@Qualifier("randomFortuneService") FortuneService theFortuneService) {

	System.out.println(">> TennisCoach: inside constructor using @autowired and @qualifier");
	
	fortuneService = theFortuneService;
}


#Using @Qualifier with Setter Injection

@Autowired
@Qualifier("randomFortuneService")
public void setFortuneService(FortuneService theFortuneService) {
	System.out.println(">> TennisCoach: inside setFortuneService() method");
	this.fortuneService = theFortuneService;
}

or

@Autowired
public void setFortuneService(@Qualifier("randomFortuneService") FortuneService theFortuneService) {
	System.out.println(">> TennisCoach: inside setFortuneService() method");
	this.fortuneService = theFortuneService;
}



#How to inject properties file using Java annotations

This solution will show you how inject values from a properties file using annotatons. 
The values will no longer be hard coded in the Java code.

1. Create a properties file to hold your properties. It will be a name value pair.  
New text file:  src/sport.properties
	foo.email=myeasycoach@luv2code.com
	foo.team=Silly Java Coders
	
Note the location of the properties file is very important. 
It must be stored in src/sport.properties

2. Load the properties file in the XML config file.
File: applicationContext.xml

Add the following lines:
    <context:property-placeholder location="classpath:sport.properties"/>  
This should appear just after the <context:component-scan .../> line

3. Inject the properties values into your Swim Coach: SwimCoach.java
	@Value("${foo.email}")
	private String email;
		
	@Value("${foo.team}")
	private String team;





#Bean Scopes and Lifecycle methods
Scope refers to the lifecycle of bean.
How long does the bean live?
How many instnces are created?
How is the bean shared?

#We can explicitly specify the bean scope using @Scope annotation
@Component
@Scope("Singleton")
public class TennisCoach implements Coach{

}


Different types of scope:
1.Singleton: Same object for each request
2.Prototype: New object for each request, basically it creates new instance every time


#Bean LifeCycle methods/Hooks:

You can add custome code during bean intialization
	Calling custom business logic methods.
	Setting up handles to resources (db,sockets,files,etc)
	
You can add custome code during bean destruction
	Calling custom business logic methods.
	Cleaning up handles to resources (db,sockets,files,etc)

#Development process:
1.Define your methods for init and destroy
2.Add annotations @PostConstruct and @PreDestroy

@PostConstruct: The code will execute after the constructor and after injection of dependencies
@PreDestroy: The code will execute before bean is destroyed.

Access modifier:
The method can have any access modifier (public, protected, private)

Return type:
The method can have any return type. However, "void' is most commonly used. If you give a return type just note that you will not be able to capture the return value. As a result, "void" is commonly used.

Method name:
The method can have any method name.

Arguments:
The method can not accept any arguments. The method should be no-arg.

# Note:
If you are using Java 9 or higher, then you will encounter an error when using @PostConstruct and @PreDestroy in your code. 
When using Java 9 and higher, javax.annotation has been removed from its default classpath.
That's why we Eclipse can't find it.


#Java Configurations Without XML:

//Defining the Configuration Class
@Configuration()   // This defines a class as a configuration class
@ComponentScan("package-name")  //This defines the package under which all classes are mapped in Spring container.

//Reading Spring Java Configuration Class:
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConfigClassName.class);

//Retrive a bean from Spring ContainerCoach theCoach = context.getBean("tennisCoach",Coach.class);
#Defining beans with Java Code@BeanThis will expose the bean to the Spring Container, no component scan is used to map the beans in the Spring Container.



	

	

